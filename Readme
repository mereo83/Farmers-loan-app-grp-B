// Create an empty array to store customer data
let customers = [];

// Keep track of whether a user is logged in or not
let loggedIn = false;

// Function to create a new account
function createAccount() {
  // Get the username and password from the input fields
  const username = getValueById('username');
  const password = getValueById('password');

  // Check if both username and password are provided
  if (username && password) {
    try {
      // Account creation logic (assume it's successful)
      
      // Show success message and clear input fields
      showMessage('success', 'Account created successfully. Please login.');
      clearInputFields('username', 'password');
    } catch (error) {
      // Show error message if account creation fails
      showMessage('error', 'Failed to create an account. Please try again.');
    }
  } else {
    // Show error message if either username or password is missing
    showMessage('error', 'Please enter a username and password.');
  }
}

// Function to handle user login
function login() {
  // Get the username and password from the input fields
  const username = getValueById('username');
  const password = getValueById('password');

  // Check if both username and password are provided
  if (username && password) {
    try {
      // Login logic (assume it's successful)
      
      // Set the loggedIn flag to true
      loggedIn = true;
      // Show the dashboard and clear input fields
      showDashboard();
      clearInputFields('username', 'password');
    } catch (error) {
      // Show error message if login fails
      showMessage('error', 'Login failed. Please check your credentials.');
    }
  } else {
    // Show error message if either username or password is missing
    showMessage('error', 'Please enter a username and password.');
  }
}

// Function to handle user logout
function logout() {
  // Set the loggedIn flag to false
  loggedIn = false;
  // Show the dashboard
  showDashboard();
}

// Function to show/hide the login form and dashboard based on the loggedIn flag
function showDashboard() {
  const loginForm = getSelector('.form-container');
  const dashboard = getById('dashboard');

  // Show the login form if not logged in, otherwise show the dashboard
  loginForm.style.display = loggedIn ? 'none' : 'block';
  dashboard.style.display = loggedIn ? 'block' : 'none';
}

// Function to record a debt for a customer
function recordDebt() {
  // Get the customer name and debt amount from the input fields
  const customerName = getValueById('customerName');
  const debtAmount = parseFloat(getValueById('debtAmount'));

  // Check if both customer name and debt amount are provided
  if (customerName && debtAmount) {
    try {
      // Add the customer to the customers array with the supplied and borrowed amounts
      
      // Show success message, clear input fields, and update the customers list
      showMessage('success', 'Debt recorded successfully.');
      clearInputFields('customerName', 'debtAmount');
      showCustomers();
    } catch (error) {
      // Show error message if recording debt fails
      showMessage('error', 'Failed to record debt. Please try again.');
    }
  } else {
    // Show error message if either customer name or debt amount is missing
    showMessage('error', 'Please enter a customer name and debt amount.');
  }
}

// Function to record a supply for a customer
function recordSupply() {
  // Get the customer name and supply amount from the input fields
  const customerName = getValueById('customerName');
  const supplyAmount = parseFloat(getValueById('supplyAmount'));

  // Check if both customer name and supply amount are provided
  if (customerName && supplyAmount) {
    // Find the customer by name in the customers array
    const customer = findCustomerByName(customerName);

    if (customer) {
      // Update the supplied amount for the customer
      
      // Show success message, clear input fields, and update the customers list
      showMessage('success', 'Supply recorded successfully.');
      clearInputFields('customerName', 'supplyAmount');
      showCustomers();
    } else {
      // Show error message if customer is not found
      showMessage('error', `Customer "${customerName}" not found.`);
    }
  } else {
    // Show error message if either customer name or supply amount is missing
    showMessage('error', 'Please enter a customer name and supply amount.');
  }
}

// Function to find a customer by name in the customers array
function findCustomerByName(name) {
  return customers.find((customer) => customer.name === name);
}

// Function to search for a customer by name
function searchCustomer() {
  // Get the search name from the input field
  const searchName = getValueById('searchName');
  
  // Find the customer by name in the customers array
  const customer = findCustomerByName(searchName);

  if (customer) {
    // Show customer details if found
      
  } else {
    // Show error message if customer is not found
    showMessage('error', `Customer "${searchName}" not found.`);
  }
}

// Function to delete a customer from the customers array
function deleteCustomer() {
  // Get the customer name to be deleted from the input field
  const deleteName = getValueById('deleteName');
  // Find the index of the customer in the customers array
  const index = customers.findIndex((customer) => customer.name === deleteName);

  if (index !== -1) {
    try {
      // Remove the customer from the customers array
      
      // Show success message, clear input field, and update the customers list
      showMessage('success', `Customer "${deleteName}" deleted successfully.`);
      clearInputFields('deleteName');
      showCustomers();
    } catch (error) {
      // Show error message if deleting customer fails
      showMessage('error', 'Failed to delete customer. Please try again.');
    }
  } else {
    // Show error message if customer is not found
    showMessage('error', `Customer "${deleteName}" not found.`);
  }
}

// Function to update the customers table in the UI
function showCustomers() {
  const customersTableBody = getById('customersTableBody');
  customersTableBody.innerHTML = '';

  customers.forEach((customer) => {
    // Create a new row for each customer
    const row = createElement('tr');
    // Add the customer details to the row
    row.innerHTML = `
      <td>${customer.name}</td>
      <td>${customer.supplied}</td>
      <td>${customer.borrowed}</td>
      <td>${customer.supplied - customer.borrowed}</td>
    `;
    // Append a "View Statement" button to the row
    appendStatementCell(row, customer);
    // Append the row to the table body
    customersTableBody.appendChild(row);
  });
}

// Function to append a statement cell with a "View Statement" button to a row
function appendStatementCell(row, customer) {
  const cell = createElement('td');
  const button = createElement('button');
  button.textContent = 'View Statement';
  button.onclick = () => viewStatement(customer);
  cell.appendChild(button);
  row.appendChild(cell);
}

// Function to view the statement of an individual customer
function viewStatement(customer) {
  const { name, supplied, borrowed } = customer;
  const balance = supplied - borrowed;

  // Show the statement of the customer
  showMessage(
    'success',
    `Customer "${name}" - Statement of Account:\n\nAmount Supplied: $${supplied}\nAmount Borrowed: $${borrowed}\nBalance Amount: $${balance}`
  );
}

// Function to show a message on the dashboard
function showMessage(type, message) {
  const messageContainer = createElement('div');
  messageContainer.className = type;
  messageContainer.textContent = message;
  getById('dashboard').insertBefore(messageContainer, getById('dashboard').firstChild);
  // Remove the message after 3 seconds
  setTimeout(() => {
    messageContainer.remove();
  }, 3000);
}

// Utility function to get the value of an input field by its id
function getValueById(id) {
  return getById(id).value;
}

// Utility function to clear the values of input fields
function clearInputFields(...ids) {
  ids.forEach((id) => {
    getById(id).value = '';
  });
}

// Utility function to get an element by its id
function getById(id) {
  return document.getElementById(id);
}

// Utility function to create an element with a given tag name
function createElement(tagName) {
  return document.createElement(tagName);
}

// Utility function to get an element by a CSS selector
function getSelector(selector) {
  return document.querySelector(selector);
}

// Initially, show the dashboard and customers
showDashboard();
showCustomers();
